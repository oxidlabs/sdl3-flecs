#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SpriteData
{
    packed_float3 Position;
    float Rotation;
    float2 Scale;
    float2 Padding;
    float TexU;
    float TexV;
    float TexW;
    float TexH;
    float4 Color;
};

struct type_StructuredBuffer_SpriteData
{
    SpriteData _m0[1];
};

struct type_UniformBlock
{
    float4x4 ViewProjectionMatrix;
};

constant spvUnsafeArray<uint, 6> _39 = spvUnsafeArray<uint, 6>({ 0u, 1u, 2u, 3u, 2u, 1u });

struct main0_out
{
    float2 out_var_TEXCOORD0 [[user(locn0)]];
    float4 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_SpriteData& DataBuffer [[buffer(1)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    uint _50 = gl_VertexIndex / 6u;
    uint _51 = gl_VertexIndex % 6u;
    float _71 = float(_39[_51] & 1u);
    float _73 = float(_39[_51] >> 1u);
    float2 _80 = float2(_71, _73) * DataBuffer._m0[_50].Scale;
    float _81 = sin(DataBuffer._m0[_50].Rotation);
    float _82 = cos(DataBuffer._m0[_50].Rotation);
    float _83 = _80.x;
    float _85 = _80.y;
    out.out_var_TEXCOORD0 = float2(DataBuffer._m0[_50].TexU + (DataBuffer._m0[_50].TexW * _71), DataBuffer._m0[_50].TexV + (DataBuffer._m0[_50].TexH * _73));
    out.out_var_TEXCOORD1 = DataBuffer._m0[_50].Color;
    out.gl_Position = UniformBlock.ViewProjectionMatrix * float4(float2(DataBuffer._m0[_50].Position[0], DataBuffer._m0[_50].Position[1]) + float2((_83 * _82) - (_85 * _81), (_83 * _81) + (_85 * _82)), DataBuffer._m0[_50].Position[2], 1.0);
    return out;
}

